generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model Product {
  id             Int     @id @default(autoincrement())
  nmId           BigInt  @unique // WB id
  imtId          BigInt?
  name           String?
  brand          String?
  image          String?
  supplier       String? // STIK.STORE
  supplierId     Int?
  supplierRating Float?
  rating         Float?
  reviewRating   Float?
  feedbacks      Int?
  price          Int?
  totalQuantity  Int?
  is_our_product Boolean @default(false)
  colors         Json?

  parsedAt DateTime @default(now())

  //Обратная связь
  cart ProductCart?

  stockHistory    DailyStockSnapshot[]
  warehouseStocks WarehouseStock[]

  @@index([nmId])
}

model ProductCart {
  // кажется тут не нужен id
  // id          Int     @id @default(autoincrement())
  nmId        BigInt  @unique
  imtId       BigInt?
  slug        String?
  name        String?
  vendorCode  String?
  description String?

  // Вложенные структуры в JSON
  options        Json?
  groupedOptions Json?
  certificate    Json?
  fullColors     Json?
  selling        Json?
  media          Json?
  data           Json?

  // Простые поля
  nmColorsNames String?
  contents      String?
  hasRich       Boolean?

  parsedAt DateTime @default(now())

  // связь с Product я подумал, что id 
  product Product? @relation(fields: [nmId], references: [nmId])

  @@index([nmId])
}

model DailyStockSnapshot {
  id         Int      @id @default(autoincrement())
  date       DateTime
  totalStock Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int

  @@unique([productId, date]) // Чтобы не было дубликатов по дате
}

model WarehouseStock {
  id       Int     @id @default(autoincrement())
  wh       Int // ID склада
  dtype    Int?
  dist     Int?
  qty      Int
  priority Int?
  time1    Int?
  time2    Int?
  sizeName String? // sizes[].name
  sizeRank Int? // sizes[].rank
  optionId BigInt? // sizes[].optionId

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())

  @@index([productId])
}
