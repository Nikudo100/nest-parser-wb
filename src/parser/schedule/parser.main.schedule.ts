import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { ParserLogicService } from '../services/parser.logic.service';

@Injectable()
export class ParserMainSchedule {
  private readonly logger = new Logger(ParserMainSchedule.name);

  constructor(private readonly parserLogicService: ParserLogicService) { }

  @Cron('0 20 13 * * *', { timeZone: 'Europe/Moscow' })
  async handleCron() {
    this.logger.debug('‚è∞ [12:00] –ó–∞–ø—É—Å–∫ runSimilarProducts()');
    try {
      await this.parserLogicService.runSimilarProducts();
      this.logger.debug('‚úÖ runSimilarProducts() –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ runSimilarProducts()', error);
    }
  }
  @Cron('0 22 13 * * *', { timeZone: 'Europe/Moscow' })
  async handleCron1() {
    this.logger.debug('‚è∞ [12:00] –ó–∞–ø—É—Å–∫ runSimilarProducts()');
    try {
      await this.parserLogicService.runSimilarProducts();
      this.logger.debug('‚úÖ runSimilarProducts() –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ runSimilarProducts()', error);
    }
  }

  @Cron('0 21 13 * * *', { timeZone: 'Europe/Moscow' })
  async handleCron2() {
    this.logger.debug('‚è∞ [12:00] –ó–∞–ø—É—Å–∫ runCardJson()');
    try {
      await this.parserLogicService.runCardJson();
      this.logger.debug('‚úÖ runCardJson() –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ runCardJson()', error);
    }
  }

  // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ª–æ–≥–≥–µ—Ä
  @Cron('*/60 * * * * *')
  handleDebugCron() {
    this.logger.debug('üïí Scheduler is working (60  s interval)');
  }

}